name: build AOSP

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: üîÑ Checkout
      uses: actions/checkout@v4

    - name: ‚è∞ Timezone Asia/Jakarta
      run: |
        sudo rm -f /etc/localtime
        sudo ln -s /usr/share/zoneinfo/Asia/Jakarta /etc/localtime

    - name: üì¶ Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          git ccache bc bison flex libssl-dev \
          build-essential curl wget zip unzip \
          libelf-dev python3 python3-pip rsync \
          pkg-config libncurses-dev dwarves \
          binutils-aarch64-linux-gnu gcc-aarch64-linux-gnu \
          gcc-arm-linux-gnueabi
        echo "CCACHE_DIR=${HOME}/.ccache" >> $GITHUB_ENV

    - name: üß∞ Install LLVM/Clang 20
      run: |
        # Ubuntu 22.04 repo resmi punya llvm-14; kita ambil rilis prebuilt LLVM 20
        LLVM_URL="https://github.com/llvm/llvm-project/releases/download/llvmorg-20.0.0/clang+llvm-20.0.0-x86_64-linux-gnu-ubuntu-22.04.tar.xz"
        mkdir -p $HOME/toolchains && cd $HOME/toolchains
        curl -L "$LLVM_URL" -o llvm20.tar.xz
        tar -xf llvm20.tar.xz
        LLVM_DIR=$(find . -maxdepth 1 -type d -name "clang+llvm-20.0.0*" | head -n1)
        echo "$HOME/toolchains/${LLVM_DIR}/bin" >> $GITHUB_PATH
        echo "LLVM_DIR=$HOME/toolchains/${LLVM_DIR}" >> $GITHUB_ENV

    - name: ‚öôÔ∏è Export Build Vars
      run: |
        echo "ARCH=arm64" >> $GITHUB_ENV
        echo "SUBARCH=arm64" >> $GITHUB_ENV
        echo "LLVM=1" >> $GITHUB_ENV
        echo "CC=clang" >> $GITHUB_ENV
        echo "LD=ld.lld" >> $GITHUB_ENV
        echo "AR=llvm-ar" >> $GITHUB_ENV
        echo "NM=llvm-nm" >> $GITHUB_ENV
        echo "OBJCOPY=llvm-objcopy" >> $GITHUB_ENV
        echo "OBJDUMP=llvm-objdump" >> $GITHUB_ENV
        echo "STRIP=llvm-strip" >> $GITHUB_ENV
        echo "CLANG_TRIPLE=aarch64-linux-gnu-" >> $GITHUB_ENV
        echo "CROSS_COMPILE=aarch64-linux-gnu-" >> $GITHUB_ENV
        echo "CROSS_COMPILE_ARM32=arm-linux-gnueabi-" >> $GITHUB_ENV
        echo "KBUILD_BUILD_USER=runner" >> $GITHUB_ENV
        echo "KBUILD_BUILD_HOST=github" >> $GITHUB_ENV

    - name: üß± Configure
      run: |
        mkdir -p out
        make O=out sweet_defconfig || make O=out vendor/sweet_defconfig

    - name: üõ†Ô∏è Build
      run: |
        make -j$(nproc) O=out Image.gz-dtb dtbs
        # dtbo opsional:
        make -j$(nproc) O=out dtbo.img || true

    - name: üì¶ AnyKernel3
      run: |
        cd $GITHUB_WORKSPACE
        git clone https://github.com/osm0sis/AnyKernel3 -b master anykernel
        cp out/arch/arm64/boot/Image.gz-dtb anykernel/zImage
        # Jika butuh dtbo:
        if [ -f out/arch/arm64/boot/dtbo.img ]; then
          cp out/arch/arm64/boot/dtbo.img anykernel/dtbo.img
        fi
        # Set device(s) di anykernel.sh sesuai sweet/sweetin bila perlu.
        cd anykernel
        zip -r9 Sweet-4.14.356-Clang20.zip * -x .git* README.md *placeholder

    - name: ‚¨ÜÔ∏è Upload Artefak
      uses: actions/upload-artifact@v4
      with:
        name: Sweet-4.14.356-Clang20
        path: |
          out/arch/arm64/boot/Image.gz-dtb
          out/arch/arm64/boot/dts/**/*.dtb
          out/arch/arm64/boot/dtbo.img
          anykernel/Sweet-4.14.356-Clang20.zip
        if-no-files-found: warn
